/* automatically generated by rust-bindgen 0.59.2 */

#[repr(C)]
pub struct sg_buffer {
    pub id: u32,
}
impl Default for sg_buffer {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_buffer {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_buffer {{  }}")
    }
}
#[repr(C)]
pub struct sg_image {
    pub id: u32,
}
impl Default for sg_image {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_image {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_image {{  }}")
    }
}
#[repr(C)]
pub struct sg_shader {
    pub id: u32,
}
impl Default for sg_shader {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_shader {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_shader {{  }}")
    }
}
#[repr(C)]
pub struct sg_pipeline {
    pub id: u32,
}
impl Default for sg_pipeline {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pipeline {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_pipeline {{  }}")
    }
}
#[repr(C)]
pub struct sg_pass {
    pub id: u32,
}
impl Default for sg_pass {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pass {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_pass {{  }}")
    }
}
#[repr(C)]
pub struct sg_context {
    pub id: u32,
}
impl Default for sg_context {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_context {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_context {{  }}")
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_range {
    pub ptr: *const ::core::ffi::c_void,
    pub size: usize,
}
impl Default for sg_range {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
pub const sg_backend_SG_BACKEND_GLCORE33: sg_backend = 0;
pub const sg_backend_SG_BACKEND_GLES2: sg_backend = 1;
pub const sg_backend_SG_BACKEND_GLES3: sg_backend = 2;
pub const sg_backend_SG_BACKEND_D3D11: sg_backend = 3;
pub const sg_backend_SG_BACKEND_METAL_IOS: sg_backend = 4;
pub const sg_backend_SG_BACKEND_METAL_MACOS: sg_backend = 5;
pub const sg_backend_SG_BACKEND_METAL_SIMULATOR: sg_backend = 6;
pub const sg_backend_SG_BACKEND_WGPU: sg_backend = 7;
pub const sg_backend_SG_BACKEND_DUMMY: sg_backend = 8;
pub type sg_backend = ::std::os::raw::c_uint;
pub const sg_pixel_format__SG_PIXELFORMAT_DEFAULT: sg_pixel_format = 0;
pub const sg_pixel_format_SG_PIXELFORMAT_NONE: sg_pixel_format = 1;
pub const sg_pixel_format_SG_PIXELFORMAT_R8: sg_pixel_format = 2;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SN: sg_pixel_format = 3;
pub const sg_pixel_format_SG_PIXELFORMAT_R8UI: sg_pixel_format = 4;
pub const sg_pixel_format_SG_PIXELFORMAT_R8SI: sg_pixel_format = 5;
pub const sg_pixel_format_SG_PIXELFORMAT_R16: sg_pixel_format = 6;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SN: sg_pixel_format = 7;
pub const sg_pixel_format_SG_PIXELFORMAT_R16UI: sg_pixel_format = 8;
pub const sg_pixel_format_SG_PIXELFORMAT_R16SI: sg_pixel_format = 9;
pub const sg_pixel_format_SG_PIXELFORMAT_R16F: sg_pixel_format = 10;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8: sg_pixel_format = 11;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SN: sg_pixel_format = 12;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8UI: sg_pixel_format = 13;
pub const sg_pixel_format_SG_PIXELFORMAT_RG8SI: sg_pixel_format = 14;
pub const sg_pixel_format_SG_PIXELFORMAT_R32UI: sg_pixel_format = 15;
pub const sg_pixel_format_SG_PIXELFORMAT_R32SI: sg_pixel_format = 16;
pub const sg_pixel_format_SG_PIXELFORMAT_R32F: sg_pixel_format = 17;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16: sg_pixel_format = 18;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SN: sg_pixel_format = 19;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16UI: sg_pixel_format = 20;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16SI: sg_pixel_format = 21;
pub const sg_pixel_format_SG_PIXELFORMAT_RG16F: sg_pixel_format = 22;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8: sg_pixel_format = 23;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SN: sg_pixel_format = 24;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8UI: sg_pixel_format = 25;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA8SI: sg_pixel_format = 26;
pub const sg_pixel_format_SG_PIXELFORMAT_BGRA8: sg_pixel_format = 27;
pub const sg_pixel_format_SG_PIXELFORMAT_RGB10A2: sg_pixel_format = 28;
pub const sg_pixel_format_SG_PIXELFORMAT_RG11B10F: sg_pixel_format = 29;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32UI: sg_pixel_format = 30;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32SI: sg_pixel_format = 31;
pub const sg_pixel_format_SG_PIXELFORMAT_RG32F: sg_pixel_format = 32;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16: sg_pixel_format = 33;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SN: sg_pixel_format = 34;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16UI: sg_pixel_format = 35;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16SI: sg_pixel_format = 36;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA16F: sg_pixel_format = 37;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32UI: sg_pixel_format = 38;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32SI: sg_pixel_format = 39;
pub const sg_pixel_format_SG_PIXELFORMAT_RGBA32F: sg_pixel_format = 40;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH: sg_pixel_format = 41;
pub const sg_pixel_format_SG_PIXELFORMAT_DEPTH_STENCIL: sg_pixel_format = 42;
pub const sg_pixel_format_SG_PIXELFORMAT_BC1_RGBA: sg_pixel_format = 43;
pub const sg_pixel_format_SG_PIXELFORMAT_BC2_RGBA: sg_pixel_format = 44;
pub const sg_pixel_format_SG_PIXELFORMAT_BC3_RGBA: sg_pixel_format = 45;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_R: sg_pixel_format = 46;
pub const sg_pixel_format_SG_PIXELFORMAT_BC4_RSN: sg_pixel_format = 47;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RG: sg_pixel_format = 48;
pub const sg_pixel_format_SG_PIXELFORMAT_BC5_RGSN: sg_pixel_format = 49;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBF: sg_pixel_format = 50;
pub const sg_pixel_format_SG_PIXELFORMAT_BC6H_RGBUF: sg_pixel_format = 51;
pub const sg_pixel_format_SG_PIXELFORMAT_BC7_RGBA: sg_pixel_format = 52;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_2BPP: sg_pixel_format = 53;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGB_4BPP: sg_pixel_format = 54;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_2BPP: sg_pixel_format = 55;
pub const sg_pixel_format_SG_PIXELFORMAT_PVRTC_RGBA_4BPP: sg_pixel_format = 56;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8: sg_pixel_format = 57;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGB8A1: sg_pixel_format = 58;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RGBA8: sg_pixel_format = 59;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11: sg_pixel_format = 60;
pub const sg_pixel_format_SG_PIXELFORMAT_ETC2_RG11SN: sg_pixel_format = 61;
pub const sg_pixel_format__SG_PIXELFORMAT_NUM: sg_pixel_format = 62;
pub const sg_pixel_format__SG_PIXELFORMAT_FORCE_U32: sg_pixel_format = 2147483647;
pub type sg_pixel_format = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_pixelformat_info {
    pub sample: bool,
    pub filter: bool,
    pub render: bool,
    pub blend: bool,
    pub msaa: bool,
    pub depth: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_features {
    pub instancing: bool,
    pub origin_top_left: bool,
    pub multiple_render_targets: bool,
    pub msaa_render_targets: bool,
    pub imagetype_3d: bool,
    pub imagetype_array: bool,
    pub image_clamp_to_border: bool,
    pub mrt_independent_blend_state: bool,
    pub mrt_independent_write_mask: bool,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_limits {
    pub max_image_size_2d: ::std::os::raw::c_int,
    pub max_image_size_cube: ::std::os::raw::c_int,
    pub max_image_size_3d: ::std::os::raw::c_int,
    pub max_image_size_array: ::std::os::raw::c_int,
    pub max_image_array_layers: ::std::os::raw::c_int,
    pub max_vertex_attrs: ::std::os::raw::c_int,
    pub gl_max_vertex_uniform_vectors: ::std::os::raw::c_int,
}
pub const sg_resource_state_SG_RESOURCESTATE_INITIAL: sg_resource_state = 0;
pub const sg_resource_state_SG_RESOURCESTATE_ALLOC: sg_resource_state = 1;
pub const sg_resource_state_SG_RESOURCESTATE_VALID: sg_resource_state = 2;
pub const sg_resource_state_SG_RESOURCESTATE_FAILED: sg_resource_state = 3;
pub const sg_resource_state_SG_RESOURCESTATE_INVALID: sg_resource_state = 4;
pub const sg_resource_state__SG_RESOURCESTATE_FORCE_U32: sg_resource_state = 2147483647;
pub type sg_resource_state = ::std::os::raw::c_uint;
pub const sg_usage__SG_USAGE_DEFAULT: sg_usage = 0;
pub const sg_usage_SG_USAGE_IMMUTABLE: sg_usage = 1;
pub const sg_usage_SG_USAGE_DYNAMIC: sg_usage = 2;
pub const sg_usage_SG_USAGE_STREAM: sg_usage = 3;
pub const sg_usage__SG_USAGE_NUM: sg_usage = 4;
pub const sg_usage__SG_USAGE_FORCE_U32: sg_usage = 2147483647;
pub type sg_usage = ::std::os::raw::c_uint;
pub const sg_buffer_type__SG_BUFFERTYPE_DEFAULT: sg_buffer_type = 0;
pub const sg_buffer_type_SG_BUFFERTYPE_VERTEXBUFFER: sg_buffer_type = 1;
pub const sg_buffer_type_SG_BUFFERTYPE_INDEXBUFFER: sg_buffer_type = 2;
pub const sg_buffer_type__SG_BUFFERTYPE_NUM: sg_buffer_type = 3;
pub const sg_buffer_type__SG_BUFFERTYPE_FORCE_U32: sg_buffer_type = 2147483647;
pub type sg_buffer_type = ::std::os::raw::c_uint;
pub const sg_index_type__SG_INDEXTYPE_DEFAULT: sg_index_type = 0;
pub const sg_index_type_SG_INDEXTYPE_NONE: sg_index_type = 1;
pub const sg_index_type_SG_INDEXTYPE_UINT16: sg_index_type = 2;
pub const sg_index_type_SG_INDEXTYPE_UINT32: sg_index_type = 3;
pub const sg_index_type__SG_INDEXTYPE_NUM: sg_index_type = 4;
pub const sg_index_type__SG_INDEXTYPE_FORCE_U32: sg_index_type = 2147483647;
pub type sg_index_type = ::std::os::raw::c_uint;
pub const sg_image_type__SG_IMAGETYPE_DEFAULT: sg_image_type = 0;
pub const sg_image_type_SG_IMAGETYPE_2D: sg_image_type = 1;
pub const sg_image_type_SG_IMAGETYPE_CUBE: sg_image_type = 2;
pub const sg_image_type_SG_IMAGETYPE_3D: sg_image_type = 3;
pub const sg_image_type_SG_IMAGETYPE_ARRAY: sg_image_type = 4;
pub const sg_image_type__SG_IMAGETYPE_NUM: sg_image_type = 5;
pub const sg_image_type__SG_IMAGETYPE_FORCE_U32: sg_image_type = 2147483647;
pub type sg_image_type = ::std::os::raw::c_uint;
pub const sg_sampler_type__SG_SAMPLERTYPE_DEFAULT: sg_sampler_type = 0;
pub const sg_sampler_type_SG_SAMPLERTYPE_FLOAT: sg_sampler_type = 1;
pub const sg_sampler_type_SG_SAMPLERTYPE_SINT: sg_sampler_type = 2;
pub const sg_sampler_type_SG_SAMPLERTYPE_UINT: sg_sampler_type = 3;
pub type sg_sampler_type = ::std::os::raw::c_uint;
pub const sg_cube_face_SG_CUBEFACE_POS_X: sg_cube_face = 0;
pub const sg_cube_face_SG_CUBEFACE_NEG_X: sg_cube_face = 1;
pub const sg_cube_face_SG_CUBEFACE_POS_Y: sg_cube_face = 2;
pub const sg_cube_face_SG_CUBEFACE_NEG_Y: sg_cube_face = 3;
pub const sg_cube_face_SG_CUBEFACE_POS_Z: sg_cube_face = 4;
pub const sg_cube_face_SG_CUBEFACE_NEG_Z: sg_cube_face = 5;
pub const sg_cube_face_SG_CUBEFACE_NUM: sg_cube_face = 6;
pub const sg_cube_face__SG_CUBEFACE_FORCE_U32: sg_cube_face = 2147483647;
pub type sg_cube_face = ::std::os::raw::c_uint;
pub const sg_shader_stage_SG_SHADERSTAGE_VS: sg_shader_stage = 0;
pub const sg_shader_stage_SG_SHADERSTAGE_FS: sg_shader_stage = 1;
pub const sg_shader_stage__SG_SHADERSTAGE_FORCE_U32: sg_shader_stage = 2147483647;
pub type sg_shader_stage = ::std::os::raw::c_uint;
pub const sg_primitive_type__SG_PRIMITIVETYPE_DEFAULT: sg_primitive_type = 0;
pub const sg_primitive_type_SG_PRIMITIVETYPE_POINTS: sg_primitive_type = 1;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINES: sg_primitive_type = 2;
pub const sg_primitive_type_SG_PRIMITIVETYPE_LINE_STRIP: sg_primitive_type = 3;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLES: sg_primitive_type = 4;
pub const sg_primitive_type_SG_PRIMITIVETYPE_TRIANGLE_STRIP: sg_primitive_type = 5;
pub const sg_primitive_type__SG_PRIMITIVETYPE_NUM: sg_primitive_type = 6;
pub const sg_primitive_type__SG_PRIMITIVETYPE_FORCE_U32: sg_primitive_type = 2147483647;
pub type sg_primitive_type = ::std::os::raw::c_uint;
pub const sg_filter__SG_FILTER_DEFAULT: sg_filter = 0;
pub const sg_filter_SG_FILTER_NEAREST: sg_filter = 1;
pub const sg_filter_SG_FILTER_LINEAR: sg_filter = 2;
pub const sg_filter_SG_FILTER_NEAREST_MIPMAP_NEAREST: sg_filter = 3;
pub const sg_filter_SG_FILTER_NEAREST_MIPMAP_LINEAR: sg_filter = 4;
pub const sg_filter_SG_FILTER_LINEAR_MIPMAP_NEAREST: sg_filter = 5;
pub const sg_filter_SG_FILTER_LINEAR_MIPMAP_LINEAR: sg_filter = 6;
pub const sg_filter__SG_FILTER_NUM: sg_filter = 7;
pub const sg_filter__SG_FILTER_FORCE_U32: sg_filter = 2147483647;
pub type sg_filter = ::std::os::raw::c_uint;
pub const sg_wrap__SG_WRAP_DEFAULT: sg_wrap = 0;
pub const sg_wrap_SG_WRAP_REPEAT: sg_wrap = 1;
pub const sg_wrap_SG_WRAP_CLAMP_TO_EDGE: sg_wrap = 2;
pub const sg_wrap_SG_WRAP_CLAMP_TO_BORDER: sg_wrap = 3;
pub const sg_wrap_SG_WRAP_MIRRORED_REPEAT: sg_wrap = 4;
pub const sg_wrap__SG_WRAP_NUM: sg_wrap = 5;
pub const sg_wrap__SG_WRAP_FORCE_U32: sg_wrap = 2147483647;
pub type sg_wrap = ::std::os::raw::c_uint;
pub const sg_border_color__SG_BORDERCOLOR_DEFAULT: sg_border_color = 0;
pub const sg_border_color_SG_BORDERCOLOR_TRANSPARENT_BLACK: sg_border_color = 1;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_BLACK: sg_border_color = 2;
pub const sg_border_color_SG_BORDERCOLOR_OPAQUE_WHITE: sg_border_color = 3;
pub const sg_border_color__SG_BORDERCOLOR_NUM: sg_border_color = 4;
pub const sg_border_color__SG_BORDERCOLOR_FORCE_U32: sg_border_color = 2147483647;
pub type sg_border_color = ::std::os::raw::c_uint;
pub const sg_vertex_format_SG_VERTEXFORMAT_INVALID: sg_vertex_format = 0;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT: sg_vertex_format = 1;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT2: sg_vertex_format = 2;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT3: sg_vertex_format = 3;
pub const sg_vertex_format_SG_VERTEXFORMAT_FLOAT4: sg_vertex_format = 4;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4: sg_vertex_format = 5;
pub const sg_vertex_format_SG_VERTEXFORMAT_BYTE4N: sg_vertex_format = 6;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4: sg_vertex_format = 7;
pub const sg_vertex_format_SG_VERTEXFORMAT_UBYTE4N: sg_vertex_format = 8;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2: sg_vertex_format = 9;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT2N: sg_vertex_format = 10;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT2N: sg_vertex_format = 11;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4: sg_vertex_format = 12;
pub const sg_vertex_format_SG_VERTEXFORMAT_SHORT4N: sg_vertex_format = 13;
pub const sg_vertex_format_SG_VERTEXFORMAT_USHORT4N: sg_vertex_format = 14;
pub const sg_vertex_format_SG_VERTEXFORMAT_UINT10_N2: sg_vertex_format = 15;
pub const sg_vertex_format__SG_VERTEXFORMAT_NUM: sg_vertex_format = 16;
pub const sg_vertex_format__SG_VERTEXFORMAT_FORCE_U32: sg_vertex_format = 2147483647;
pub type sg_vertex_format = ::std::os::raw::c_uint;
pub const sg_vertex_step__SG_VERTEXSTEP_DEFAULT: sg_vertex_step = 0;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_VERTEX: sg_vertex_step = 1;
pub const sg_vertex_step_SG_VERTEXSTEP_PER_INSTANCE: sg_vertex_step = 2;
pub const sg_vertex_step__SG_VERTEXSTEP_NUM: sg_vertex_step = 3;
pub const sg_vertex_step__SG_VERTEXSTEP_FORCE_U32: sg_vertex_step = 2147483647;
pub type sg_vertex_step = ::std::os::raw::c_uint;
pub const sg_uniform_type_SG_UNIFORMTYPE_INVALID: sg_uniform_type = 0;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT: sg_uniform_type = 1;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT2: sg_uniform_type = 2;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT3: sg_uniform_type = 3;
pub const sg_uniform_type_SG_UNIFORMTYPE_FLOAT4: sg_uniform_type = 4;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT: sg_uniform_type = 5;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT2: sg_uniform_type = 6;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT3: sg_uniform_type = 7;
pub const sg_uniform_type_SG_UNIFORMTYPE_INT4: sg_uniform_type = 8;
pub const sg_uniform_type_SG_UNIFORMTYPE_MAT4: sg_uniform_type = 9;
pub const sg_uniform_type__SG_UNIFORMTYPE_NUM: sg_uniform_type = 10;
pub const sg_uniform_type__SG_UNIFORMTYPE_FORCE_U32: sg_uniform_type = 2147483647;
pub type sg_uniform_type = ::std::os::raw::c_uint;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_DEFAULT: sg_uniform_layout = 0;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_NATIVE: sg_uniform_layout = 1;
pub const sg_uniform_layout_SG_UNIFORMLAYOUT_STD140: sg_uniform_layout = 2;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_NUM: sg_uniform_layout = 3;
pub const sg_uniform_layout__SG_UNIFORMLAYOUT_FORCE_U32: sg_uniform_layout = 2147483647;
pub type sg_uniform_layout = ::std::os::raw::c_uint;
pub const sg_cull_mode__SG_CULLMODE_DEFAULT: sg_cull_mode = 0;
pub const sg_cull_mode_SG_CULLMODE_NONE: sg_cull_mode = 1;
pub const sg_cull_mode_SG_CULLMODE_FRONT: sg_cull_mode = 2;
pub const sg_cull_mode_SG_CULLMODE_BACK: sg_cull_mode = 3;
pub const sg_cull_mode__SG_CULLMODE_NUM: sg_cull_mode = 4;
pub const sg_cull_mode__SG_CULLMODE_FORCE_U32: sg_cull_mode = 2147483647;
pub type sg_cull_mode = ::std::os::raw::c_uint;
pub const sg_face_winding__SG_FACEWINDING_DEFAULT: sg_face_winding = 0;
pub const sg_face_winding_SG_FACEWINDING_CCW: sg_face_winding = 1;
pub const sg_face_winding_SG_FACEWINDING_CW: sg_face_winding = 2;
pub const sg_face_winding__SG_FACEWINDING_NUM: sg_face_winding = 3;
pub const sg_face_winding__SG_FACEWINDING_FORCE_U32: sg_face_winding = 2147483647;
pub type sg_face_winding = ::std::os::raw::c_uint;
pub const sg_compare_func__SG_COMPAREFUNC_DEFAULT: sg_compare_func = 0;
pub const sg_compare_func_SG_COMPAREFUNC_NEVER: sg_compare_func = 1;
pub const sg_compare_func_SG_COMPAREFUNC_LESS: sg_compare_func = 2;
pub const sg_compare_func_SG_COMPAREFUNC_EQUAL: sg_compare_func = 3;
pub const sg_compare_func_SG_COMPAREFUNC_LESS_EQUAL: sg_compare_func = 4;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER: sg_compare_func = 5;
pub const sg_compare_func_SG_COMPAREFUNC_NOT_EQUAL: sg_compare_func = 6;
pub const sg_compare_func_SG_COMPAREFUNC_GREATER_EQUAL: sg_compare_func = 7;
pub const sg_compare_func_SG_COMPAREFUNC_ALWAYS: sg_compare_func = 8;
pub const sg_compare_func__SG_COMPAREFUNC_NUM: sg_compare_func = 9;
pub const sg_compare_func__SG_COMPAREFUNC_FORCE_U32: sg_compare_func = 2147483647;
pub type sg_compare_func = ::std::os::raw::c_uint;
pub const sg_stencil_op__SG_STENCILOP_DEFAULT: sg_stencil_op = 0;
pub const sg_stencil_op_SG_STENCILOP_KEEP: sg_stencil_op = 1;
pub const sg_stencil_op_SG_STENCILOP_ZERO: sg_stencil_op = 2;
pub const sg_stencil_op_SG_STENCILOP_REPLACE: sg_stencil_op = 3;
pub const sg_stencil_op_SG_STENCILOP_INCR_CLAMP: sg_stencil_op = 4;
pub const sg_stencil_op_SG_STENCILOP_DECR_CLAMP: sg_stencil_op = 5;
pub const sg_stencil_op_SG_STENCILOP_INVERT: sg_stencil_op = 6;
pub const sg_stencil_op_SG_STENCILOP_INCR_WRAP: sg_stencil_op = 7;
pub const sg_stencil_op_SG_STENCILOP_DECR_WRAP: sg_stencil_op = 8;
pub const sg_stencil_op__SG_STENCILOP_NUM: sg_stencil_op = 9;
pub const sg_stencil_op__SG_STENCILOP_FORCE_U32: sg_stencil_op = 2147483647;
pub type sg_stencil_op = ::std::os::raw::c_uint;
pub const sg_blend_factor__SG_BLENDFACTOR_DEFAULT: sg_blend_factor = 0;
pub const sg_blend_factor_SG_BLENDFACTOR_ZERO: sg_blend_factor = 1;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE: sg_blend_factor = 2;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_COLOR: sg_blend_factor = 3;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_COLOR: sg_blend_factor = 4;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA: sg_blend_factor = 5;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_SRC_ALPHA: sg_blend_factor = 6;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_COLOR: sg_blend_factor = 7;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_COLOR: sg_blend_factor = 8;
pub const sg_blend_factor_SG_BLENDFACTOR_DST_ALPHA: sg_blend_factor = 9;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_DST_ALPHA: sg_blend_factor = 10;
pub const sg_blend_factor_SG_BLENDFACTOR_SRC_ALPHA_SATURATED: sg_blend_factor = 11;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_COLOR: sg_blend_factor = 12;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_COLOR: sg_blend_factor = 13;
pub const sg_blend_factor_SG_BLENDFACTOR_BLEND_ALPHA: sg_blend_factor = 14;
pub const sg_blend_factor_SG_BLENDFACTOR_ONE_MINUS_BLEND_ALPHA: sg_blend_factor = 15;
pub const sg_blend_factor__SG_BLENDFACTOR_NUM: sg_blend_factor = 16;
pub const sg_blend_factor__SG_BLENDFACTOR_FORCE_U32: sg_blend_factor = 2147483647;
pub type sg_blend_factor = ::std::os::raw::c_uint;
pub const sg_blend_op__SG_BLENDOP_DEFAULT: sg_blend_op = 0;
pub const sg_blend_op_SG_BLENDOP_ADD: sg_blend_op = 1;
pub const sg_blend_op_SG_BLENDOP_SUBTRACT: sg_blend_op = 2;
pub const sg_blend_op_SG_BLENDOP_REVERSE_SUBTRACT: sg_blend_op = 3;
pub const sg_blend_op__SG_BLENDOP_NUM: sg_blend_op = 4;
pub const sg_blend_op__SG_BLENDOP_FORCE_U32: sg_blend_op = 2147483647;
pub type sg_blend_op = ::std::os::raw::c_uint;
pub const sg_color_mask__SG_COLORMASK_DEFAULT: sg_color_mask = 0;
pub const sg_color_mask_SG_COLORMASK_NONE: sg_color_mask = 16;
pub const sg_color_mask_SG_COLORMASK_R: sg_color_mask = 1;
pub const sg_color_mask_SG_COLORMASK_G: sg_color_mask = 2;
pub const sg_color_mask_SG_COLORMASK_RG: sg_color_mask = 3;
pub const sg_color_mask_SG_COLORMASK_B: sg_color_mask = 4;
pub const sg_color_mask_SG_COLORMASK_RB: sg_color_mask = 5;
pub const sg_color_mask_SG_COLORMASK_GB: sg_color_mask = 6;
pub const sg_color_mask_SG_COLORMASK_RGB: sg_color_mask = 7;
pub const sg_color_mask_SG_COLORMASK_A: sg_color_mask = 8;
pub const sg_color_mask_SG_COLORMASK_RA: sg_color_mask = 9;
pub const sg_color_mask_SG_COLORMASK_GA: sg_color_mask = 10;
pub const sg_color_mask_SG_COLORMASK_RGA: sg_color_mask = 11;
pub const sg_color_mask_SG_COLORMASK_BA: sg_color_mask = 12;
pub const sg_color_mask_SG_COLORMASK_RBA: sg_color_mask = 13;
pub const sg_color_mask_SG_COLORMASK_GBA: sg_color_mask = 14;
pub const sg_color_mask_SG_COLORMASK_RGBA: sg_color_mask = 15;
pub const sg_color_mask__SG_COLORMASK_FORCE_U32: sg_color_mask = 2147483647;
pub type sg_color_mask = ::std::os::raw::c_uint;
pub const sg_action__SG_ACTION_DEFAULT: sg_action = 0;
pub const sg_action_SG_ACTION_CLEAR: sg_action = 1;
pub const sg_action_SG_ACTION_LOAD: sg_action = 2;
pub const sg_action_SG_ACTION_DONTCARE: sg_action = 3;
pub const sg_action__SG_ACTION_NUM: sg_action = 4;
pub const sg_action__SG_ACTION_FORCE_U32: sg_action = 2147483647;
pub type sg_action = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_attachment_action {
    pub action: sg_action,
    pub value: sg_color,
}
impl Default for sg_color_attachment_action {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_attachment_action {
    pub action: sg_action,
    pub value: f32,
}
impl Default for sg_depth_attachment_action {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sg_stencil_attachment_action {
    pub action: sg_action,
    pub value: u8,
}
impl Default for sg_stencil_attachment_action {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_stencil_attachment_action {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "sg_stencil_attachment_action {{ action: {:?} }}",
            self.action
        )
    }
}
#[repr(C)]
pub struct sg_pass_action {
    pub _start_canary: u32,
    pub colors: [sg_color_attachment_action; 4usize],
    pub depth: sg_depth_attachment_action,
    pub stencil: sg_stencil_attachment_action,
    pub _end_canary: u32,
}
impl Default for sg_pass_action {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pass_action {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "sg_pass_action {{ colors: {:?}, depth: {:?}, stencil: {:?} }}",
            self.colors, self.depth, self.stencil
        )
    }
}
#[repr(C)]
pub struct sg_bindings {
    pub _start_canary: u32,
    pub vertex_buffers: [sg_buffer; 8usize],
    pub vertex_buffer_offsets: [::std::os::raw::c_int; 8usize],
    pub index_buffer: sg_buffer,
    pub index_buffer_offset: ::std::os::raw::c_int,
    pub vs_images: [sg_image; 12usize],
    pub fs_images: [sg_image; 12usize],
    pub _end_canary: u32,
}
impl Default for sg_bindings {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_bindings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_bindings {{ vertex_buffers: {:?}, vertex_buffer_offsets: {:?}, index_buffer: {:?}, index_buffer_offset: {:?}, vs_images: {:?}, fs_images: {:?} }}" , self . vertex_buffers , self . vertex_buffer_offsets , self . index_buffer , self . index_buffer_offset , self . vs_images , self . fs_images)
    }
}
#[repr(C)]
pub struct sg_buffer_desc {
    pub _start_canary: u32,
    pub size: usize,
    pub type_: sg_buffer_type,
    pub usage: sg_usage,
    pub data: sg_range,
    pub label: *const ::std::os::raw::c_char,
    pub gl_buffers: [u32; 2usize],
    pub mtl_buffers: [*const ::core::ffi::c_void; 2usize],
    pub d3d11_buffer: *const ::core::ffi::c_void,
    pub wgpu_buffer: *const ::core::ffi::c_void,
    pub _end_canary: u32,
}
impl Default for sg_buffer_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_buffer_desc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_buffer_desc {{ size: {:?}, type: {:?}, usage: {:?}, data: {:?}, label: {:?}, gl_buffers: {:?}, mtl_buffers: {:?}, d3d11_buffer: {:?}, wgpu_buffer: {:?} }}" , self . size , self . type_ , self . usage , self . data , self . label , self . gl_buffers , self . mtl_buffers , self . d3d11_buffer , self . wgpu_buffer)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_image_data {
    pub subimage: [[sg_range; 16usize]; 6usize],
}
impl Default for sg_image_data {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sg_image_desc {
    pub _start_canary: u32,
    pub type_: sg_image_type,
    pub render_target: bool,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub num_slices: ::std::os::raw::c_int,
    pub num_mipmaps: ::std::os::raw::c_int,
    pub usage: sg_usage,
    pub pixel_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub min_filter: sg_filter,
    pub mag_filter: sg_filter,
    pub wrap_u: sg_wrap,
    pub wrap_v: sg_wrap,
    pub wrap_w: sg_wrap,
    pub border_color: sg_border_color,
    pub max_anisotropy: u32,
    pub min_lod: f32,
    pub max_lod: f32,
    pub data: sg_image_data,
    pub label: *const ::std::os::raw::c_char,
    pub gl_textures: [u32; 2usize],
    pub gl_texture_target: u32,
    pub mtl_textures: [*const ::core::ffi::c_void; 2usize],
    pub d3d11_texture: *const ::core::ffi::c_void,
    pub d3d11_shader_resource_view: *const ::core::ffi::c_void,
    pub wgpu_texture: *const ::core::ffi::c_void,
    pub _end_canary: u32,
}
impl Default for sg_image_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_image_desc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_image_desc {{ type: {:?}, render_target: {:?}, width: {:?}, height: {:?}, num_slices: {:?}, num_mipmaps: {:?}, usage: {:?}, pixel_format: {:?}, sample_count: {:?}, min_filter: {:?}, mag_filter: {:?}, wrap_u: {:?}, wrap_v: {:?}, wrap_w: {:?}, border_color: {:?}, min_lod: {:?}, max_lod: {:?}, data: {:?}, label: {:?}, gl_textures: {:?}, mtl_textures: {:?}, d3d11_texture: {:?}, d3d11_shader_resource_view: {:?}, wgpu_texture: {:?} }}" , self . type_ , self . render_target , self . width , self . height , self . num_slices , self . num_mipmaps , self . usage , self . pixel_format , self . sample_count , self . min_filter , self . mag_filter , self . wrap_u , self . wrap_v , self . wrap_w , self . border_color , self . min_lod , self . max_lod , self . data , self . label , self . gl_textures , self . mtl_textures , self . d3d11_texture , self . d3d11_shader_resource_view , self . wgpu_texture)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_attr_desc {
    pub name: *const ::std::os::raw::c_char,
    pub sem_name: *const ::std::os::raw::c_char,
    pub sem_index: ::std::os::raw::c_int,
}
impl Default for sg_shader_attr_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_desc {
    pub name: *const ::std::os::raw::c_char,
    pub type_: sg_uniform_type,
    pub array_count: ::std::os::raw::c_int,
}
impl Default for sg_shader_uniform_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_uniform_block_desc {
    pub size: usize,
    pub layout: sg_uniform_layout,
    pub uniforms: [sg_shader_uniform_desc; 16usize],
}
impl Default for sg_shader_uniform_block_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_image_desc {
    pub name: *const ::std::os::raw::c_char,
    pub image_type: sg_image_type,
    pub sampler_type: sg_sampler_type,
}
impl Default for sg_shader_image_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_shader_stage_desc {
    pub source: *const ::std::os::raw::c_char,
    pub bytecode: sg_range,
    pub entry: *const ::std::os::raw::c_char,
    pub d3d11_target: *const ::std::os::raw::c_char,
    pub uniform_blocks: [sg_shader_uniform_block_desc; 4usize],
    pub images: [sg_shader_image_desc; 12usize],
}
impl Default for sg_shader_stage_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sg_shader_desc {
    pub _start_canary: u32,
    pub attrs: [sg_shader_attr_desc; 16usize],
    pub vs: sg_shader_stage_desc,
    pub fs: sg_shader_stage_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
impl Default for sg_shader_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_shader_desc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "sg_shader_desc {{ attrs: {:?}, vs: {:?}, fs: {:?}, label: {:?} }}",
            self.attrs, self.vs, self.fs, self.label
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_buffer_layout_desc {
    pub stride: ::std::os::raw::c_int,
    pub step_func: sg_vertex_step,
    pub step_rate: ::std::os::raw::c_int,
}
impl Default for sg_buffer_layout_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_vertex_attr_desc {
    pub buffer_index: ::std::os::raw::c_int,
    pub offset: ::std::os::raw::c_int,
    pub format: sg_vertex_format,
}
impl Default for sg_vertex_attr_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_layout_desc {
    pub buffers: [sg_buffer_layout_desc; 8usize],
    pub attrs: [sg_vertex_attr_desc; 16usize],
}
impl Default for sg_layout_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_stencil_face_state {
    pub compare: sg_compare_func,
    pub fail_op: sg_stencil_op,
    pub depth_fail_op: sg_stencil_op,
    pub pass_op: sg_stencil_op,
}
impl Default for sg_stencil_face_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sg_stencil_state {
    pub enabled: bool,
    pub front: sg_stencil_face_state,
    pub back: sg_stencil_face_state,
    pub read_mask: u8,
    pub write_mask: u8,
    pub ref_: u8,
}
impl Default for sg_stencil_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_stencil_state {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "sg_stencil_state {{ enabled: {:?}, front: {:?}, back: {:?} }}",
            self.enabled, self.front, self.back
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_depth_state {
    pub pixel_format: sg_pixel_format,
    pub compare: sg_compare_func,
    pub write_enabled: bool,
    pub bias: f32,
    pub bias_slope_scale: f32,
    pub bias_clamp: f32,
}
impl Default for sg_depth_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_blend_state {
    pub enabled: bool,
    pub src_factor_rgb: sg_blend_factor,
    pub dst_factor_rgb: sg_blend_factor,
    pub op_rgb: sg_blend_op,
    pub src_factor_alpha: sg_blend_factor,
    pub dst_factor_alpha: sg_blend_factor,
    pub op_alpha: sg_blend_op,
}
impl Default for sg_blend_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_color_state {
    pub pixel_format: sg_pixel_format,
    pub write_mask: sg_color_mask,
    pub blend: sg_blend_state,
}
impl Default for sg_color_state {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sg_pipeline_desc {
    pub _start_canary: u32,
    pub shader: sg_shader,
    pub layout: sg_layout_desc,
    pub depth: sg_depth_state,
    pub stencil: sg_stencil_state,
    pub color_count: ::std::os::raw::c_int,
    pub colors: [sg_color_state; 4usize],
    pub primitive_type: sg_primitive_type,
    pub index_type: sg_index_type,
    pub cull_mode: sg_cull_mode,
    pub face_winding: sg_face_winding,
    pub sample_count: ::std::os::raw::c_int,
    pub blend_color: sg_color,
    pub alpha_to_coverage_enabled: bool,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
impl Default for sg_pipeline_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pipeline_desc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_pipeline_desc {{ shader: {:?}, layout: {:?}, depth: {:?}, stencil: {:?}, color_count: {:?}, colors: {:?}, primitive_type: {:?}, index_type: {:?}, cull_mode: {:?}, face_winding: {:?}, sample_count: {:?}, blend_color: {:?}, alpha_to_coverage_enabled: {:?}, label: {:?} }}" , self . shader , self . layout , self . depth , self . stencil , self . color_count , self . colors , self . primitive_type , self . index_type , self . cull_mode , self . face_winding , self . sample_count , self . blend_color , self . alpha_to_coverage_enabled , self . label)
    }
}
#[repr(C)]
pub struct sg_pass_attachment_desc {
    pub image: sg_image,
    pub mip_level: ::std::os::raw::c_int,
    pub slice: ::std::os::raw::c_int,
}
impl Default for sg_pass_attachment_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pass_attachment_desc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "sg_pass_attachment_desc {{ image: {:?}, mip_level: {:?}, slice: {:?} }}",
            self.image, self.mip_level, self.slice
        )
    }
}
#[repr(C)]
pub struct sg_pass_desc {
    pub _start_canary: u32,
    pub color_attachments: [sg_pass_attachment_desc; 4usize],
    pub depth_stencil_attachment: sg_pass_attachment_desc,
    pub label: *const ::std::os::raw::c_char,
    pub _end_canary: u32,
}
impl Default for sg_pass_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pass_desc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_pass_desc {{ color_attachments: {:?}, depth_stencil_attachment: {:?}, label: {:?} }}" , self . color_attachments , self . depth_stencil_attachment , self . label)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_trace_hooks {
    pub user_data: *mut ::core::ffi::c_void,
    pub reset_state_cache:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub make_buffer: ::core::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_buffer_desc,
            result: sg_buffer,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub make_image: ::core::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_image_desc,
            result: sg_image,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub make_shader: ::core::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_shader_desc,
            result: sg_shader,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub make_pipeline: ::core::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_pipeline_desc,
            result: sg_pipeline,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub make_pass: ::core::option::Option<
        unsafe extern "C" fn(
            desc: *const sg_pass_desc,
            result: sg_pass,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub destroy_buffer: ::core::option::Option<
        unsafe extern "C" fn(buf: sg_buffer, user_data: *mut ::core::ffi::c_void),
    >,
    pub destroy_image: ::core::option::Option<
        unsafe extern "C" fn(img: sg_image, user_data: *mut ::core::ffi::c_void),
    >,
    pub destroy_shader: ::core::option::Option<
        unsafe extern "C" fn(shd: sg_shader, user_data: *mut ::core::ffi::c_void),
    >,
    pub destroy_pipeline: ::core::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::core::ffi::c_void),
    >,
    pub destroy_pass: ::core::option::Option<
        unsafe extern "C" fn(pass: sg_pass, user_data: *mut ::core::ffi::c_void),
    >,
    pub update_buffer: ::core::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub update_image: ::core::option::Option<
        unsafe extern "C" fn(
            img: sg_image,
            data: *const sg_image_data,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub append_buffer: ::core::option::Option<
        unsafe extern "C" fn(
            buf: sg_buffer,
            data: *const sg_range,
            result: ::std::os::raw::c_int,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub begin_default_pass: ::core::option::Option<
        unsafe extern "C" fn(
            pass_action: *const sg_pass_action,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub begin_pass: ::core::option::Option<
        unsafe extern "C" fn(
            pass: sg_pass,
            pass_action: *const sg_pass_action,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub apply_viewport: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub apply_scissor_rect: ::core::option::Option<
        unsafe extern "C" fn(
            x: ::std::os::raw::c_int,
            y: ::std::os::raw::c_int,
            width: ::std::os::raw::c_int,
            height: ::std::os::raw::c_int,
            origin_top_left: bool,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub apply_pipeline: ::core::option::Option<
        unsafe extern "C" fn(pip: sg_pipeline, user_data: *mut ::core::ffi::c_void),
    >,
    pub apply_bindings: ::core::option::Option<
        unsafe extern "C" fn(bindings: *const sg_bindings, user_data: *mut ::core::ffi::c_void),
    >,
    pub apply_uniforms: ::core::option::Option<
        unsafe extern "C" fn(
            stage: sg_shader_stage,
            ub_index: ::std::os::raw::c_int,
            data: *const sg_range,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub draw: ::core::option::Option<
        unsafe extern "C" fn(
            base_element: ::std::os::raw::c_int,
            num_elements: ::std::os::raw::c_int,
            num_instances: ::std::os::raw::c_int,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub end_pass: ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub commit: ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub alloc_buffer: ::core::option::Option<
        unsafe extern "C" fn(result: sg_buffer, user_data: *mut ::core::ffi::c_void),
    >,
    pub alloc_image: ::core::option::Option<
        unsafe extern "C" fn(result: sg_image, user_data: *mut ::core::ffi::c_void),
    >,
    pub alloc_shader: ::core::option::Option<
        unsafe extern "C" fn(result: sg_shader, user_data: *mut ::core::ffi::c_void),
    >,
    pub alloc_pipeline: ::core::option::Option<
        unsafe extern "C" fn(result: sg_pipeline, user_data: *mut ::core::ffi::c_void),
    >,
    pub alloc_pass: ::core::option::Option<
        unsafe extern "C" fn(result: sg_pass, user_data: *mut ::core::ffi::c_void),
    >,
    pub dealloc_buffer: ::core::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::core::ffi::c_void),
    >,
    pub dealloc_image: ::core::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::core::ffi::c_void),
    >,
    pub dealloc_shader: ::core::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::core::ffi::c_void),
    >,
    pub dealloc_pipeline: ::core::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::core::ffi::c_void),
    >,
    pub dealloc_pass: ::core::option::Option<
        unsafe extern "C" fn(pass_id: sg_pass, user_data: *mut ::core::ffi::c_void),
    >,
    pub init_buffer: ::core::option::Option<
        unsafe extern "C" fn(
            buf_id: sg_buffer,
            desc: *const sg_buffer_desc,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub init_image: ::core::option::Option<
        unsafe extern "C" fn(
            img_id: sg_image,
            desc: *const sg_image_desc,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub init_shader: ::core::option::Option<
        unsafe extern "C" fn(
            shd_id: sg_shader,
            desc: *const sg_shader_desc,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub init_pipeline: ::core::option::Option<
        unsafe extern "C" fn(
            pip_id: sg_pipeline,
            desc: *const sg_pipeline_desc,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub init_pass: ::core::option::Option<
        unsafe extern "C" fn(
            pass_id: sg_pass,
            desc: *const sg_pass_desc,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub uninit_buffer: ::core::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::core::ffi::c_void),
    >,
    pub uninit_image: ::core::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::core::ffi::c_void),
    >,
    pub uninit_shader: ::core::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::core::ffi::c_void),
    >,
    pub uninit_pipeline: ::core::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::core::ffi::c_void),
    >,
    pub uninit_pass: ::core::option::Option<
        unsafe extern "C" fn(pass_id: sg_pass, user_data: *mut ::core::ffi::c_void),
    >,
    pub fail_buffer: ::core::option::Option<
        unsafe extern "C" fn(buf_id: sg_buffer, user_data: *mut ::core::ffi::c_void),
    >,
    pub fail_image: ::core::option::Option<
        unsafe extern "C" fn(img_id: sg_image, user_data: *mut ::core::ffi::c_void),
    >,
    pub fail_shader: ::core::option::Option<
        unsafe extern "C" fn(shd_id: sg_shader, user_data: *mut ::core::ffi::c_void),
    >,
    pub fail_pipeline: ::core::option::Option<
        unsafe extern "C" fn(pip_id: sg_pipeline, user_data: *mut ::core::ffi::c_void),
    >,
    pub fail_pass: ::core::option::Option<
        unsafe extern "C" fn(pass_id: sg_pass, user_data: *mut ::core::ffi::c_void),
    >,
    pub push_debug_group: ::core::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            user_data: *mut ::core::ffi::c_void,
        ),
    >,
    pub pop_debug_group:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_buffer_pool_exhausted:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_image_pool_exhausted:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_shader_pool_exhausted:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_pipeline_pool_exhausted:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_pass_pool_exhausted:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_context_mismatch:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_pass_invalid:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_draw_invalid:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
    pub err_bindings_invalid:
        ::core::option::Option<unsafe extern "C" fn(user_data: *mut ::core::ffi::c_void)>,
}
impl Default for sg_trace_hooks {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sg_slot_info {
    pub state: sg_resource_state,
    pub res_id: u32,
    pub ctx_id: u32,
}
impl Default for sg_slot_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_slot_info {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_slot_info {{ state: {:?} }}", self.state)
    }
}
#[repr(C)]
pub struct sg_buffer_info {
    pub slot: sg_slot_info,
    pub update_frame_index: u32,
    pub append_frame_index: u32,
    pub append_pos: ::std::os::raw::c_int,
    pub append_overflow: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
}
impl Default for sg_buffer_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_buffer_info {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_buffer_info {{ slot: {:?}, append_pos: {:?}, append_overflow: {:?}, num_slots: {:?}, active_slot: {:?} }}" , self . slot , self . append_pos , self . append_overflow , self . num_slots , self . active_slot)
    }
}
#[repr(C)]
pub struct sg_image_info {
    pub slot: sg_slot_info,
    pub upd_frame_index: u32,
    pub num_slots: ::std::os::raw::c_int,
    pub active_slot: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
impl Default for sg_image_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_image_info {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_image_info {{ slot: {:?}, num_slots: {:?}, active_slot: {:?}, width: {:?}, height: {:?} }}" , self . slot , self . num_slots , self . active_slot , self . width , self . height)
    }
}
#[repr(C)]
pub struct sg_shader_info {
    pub slot: sg_slot_info,
}
impl Default for sg_shader_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_shader_info {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_shader_info {{ slot: {:?} }}", self.slot)
    }
}
#[repr(C)]
pub struct sg_pipeline_info {
    pub slot: sg_slot_info,
}
impl Default for sg_pipeline_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pipeline_info {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_pipeline_info {{ slot: {:?} }}", self.slot)
    }
}
#[repr(C)]
pub struct sg_pass_info {
    pub slot: sg_slot_info,
}
impl Default for sg_pass_info {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_pass_info {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "sg_pass_info {{ slot: {:?} }}", self.slot)
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_gl_context_desc {
    pub force_gles2: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_metal_context_desc {
    pub device: *const ::core::ffi::c_void,
    pub renderpass_descriptor_cb:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_void>,
    pub renderpass_descriptor_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_void,
    >,
    pub drawable_cb: ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_void>,
    pub drawable_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_void,
    >,
    pub user_data: *mut ::core::ffi::c_void,
}
impl Default for sg_metal_context_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_d3d11_context_desc {
    pub device: *const ::core::ffi::c_void,
    pub device_context: *const ::core::ffi::c_void,
    pub render_target_view_cb:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_void>,
    pub render_target_view_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_void,
    >,
    pub depth_stencil_view_cb:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_void>,
    pub depth_stencil_view_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_void,
    >,
    pub user_data: *mut ::core::ffi::c_void,
}
impl Default for sg_d3d11_context_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_wgpu_context_desc {
    pub device: *const ::core::ffi::c_void,
    pub render_view_cb:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_void>,
    pub render_view_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_void,
    >,
    pub resolve_view_cb:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_void>,
    pub resolve_view_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_void,
    >,
    pub depth_stencil_view_cb:
        ::core::option::Option<unsafe extern "C" fn() -> *const ::core::ffi::c_void>,
    pub depth_stencil_view_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void) -> *const ::core::ffi::c_void,
    >,
    pub user_data: *mut ::core::ffi::c_void,
}
impl Default for sg_wgpu_context_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sg_context_desc {
    pub color_format: sg_pixel_format,
    pub depth_format: sg_pixel_format,
    pub sample_count: ::std::os::raw::c_int,
    pub gl: sg_gl_context_desc,
    pub metal: sg_metal_context_desc,
    pub d3d11: sg_d3d11_context_desc,
    pub wgpu: sg_wgpu_context_desc,
}
impl Default for sg_context_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct sg_desc {
    pub _start_canary: u32,
    pub buffer_pool_size: ::std::os::raw::c_int,
    pub image_pool_size: ::std::os::raw::c_int,
    pub shader_pool_size: ::std::os::raw::c_int,
    pub pipeline_pool_size: ::std::os::raw::c_int,
    pub pass_pool_size: ::std::os::raw::c_int,
    pub context_pool_size: ::std::os::raw::c_int,
    pub uniform_buffer_size: ::std::os::raw::c_int,
    pub staging_buffer_size: ::std::os::raw::c_int,
    pub sampler_cache_size: ::std::os::raw::c_int,
    pub context: sg_context_desc,
    pub _end_canary: u32,
}
impl Default for sg_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sg_desc {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sg_desc {{ buffer_pool_size: {:?}, image_pool_size: {:?}, shader_pool_size: {:?}, pipeline_pool_size: {:?}, pass_pool_size: {:?}, context_pool_size: {:?}, uniform_buffer_size: {:?}, staging_buffer_size: {:?}, sampler_cache_size: {:?}, context: {:?} }}" , self . buffer_pool_size , self . image_pool_size , self . shader_pool_size , self . pipeline_pool_size , self . pass_pool_size , self . context_pool_size , self . uniform_buffer_size , self . staging_buffer_size , self . sampler_cache_size , self . context)
    }
}
extern "C" {
    pub fn sg_setup(desc: *const sg_desc);
}
extern "C" {
    pub fn sg_shutdown();
}
extern "C" {
    pub fn sg_isvalid() -> bool;
}
extern "C" {
    pub fn sg_reset_state_cache();
}
extern "C" {
    pub fn sg_install_trace_hooks(trace_hooks: *const sg_trace_hooks) -> sg_trace_hooks;
}
extern "C" {
    pub fn sg_push_debug_group(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sg_pop_debug_group();
}
extern "C" {
    pub fn sg_make_buffer(desc: *const sg_buffer_desc) -> sg_buffer;
}
extern "C" {
    pub fn sg_make_image(desc: *const sg_image_desc) -> sg_image;
}
extern "C" {
    pub fn sg_make_shader(desc: *const sg_shader_desc) -> sg_shader;
}
extern "C" {
    pub fn sg_make_pipeline(desc: *const sg_pipeline_desc) -> sg_pipeline;
}
extern "C" {
    pub fn sg_make_pass(desc: *const sg_pass_desc) -> sg_pass;
}
extern "C" {
    pub fn sg_destroy_buffer(buf: sg_buffer);
}
extern "C" {
    pub fn sg_destroy_image(img: sg_image);
}
extern "C" {
    pub fn sg_destroy_shader(shd: sg_shader);
}
extern "C" {
    pub fn sg_destroy_pipeline(pip: sg_pipeline);
}
extern "C" {
    pub fn sg_destroy_pass(pass: sg_pass);
}
extern "C" {
    pub fn sg_update_buffer(buf: sg_buffer, data: *const sg_range);
}
extern "C" {
    pub fn sg_update_image(img: sg_image, data: *const sg_image_data);
}
extern "C" {
    pub fn sg_append_buffer(buf: sg_buffer, data: *const sg_range) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sg_query_buffer_overflow(buf: sg_buffer) -> bool;
}
extern "C" {
    pub fn sg_begin_default_pass(
        pass_action: *const sg_pass_action,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sg_begin_default_passf(pass_action: *const sg_pass_action, width: f32, height: f32);
}
extern "C" {
    pub fn sg_begin_pass(pass: sg_pass, pass_action: *const sg_pass_action);
}
extern "C" {
    pub fn sg_apply_viewport(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
extern "C" {
    pub fn sg_apply_viewportf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
extern "C" {
    pub fn sg_apply_scissor_rect(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        origin_top_left: bool,
    );
}
extern "C" {
    pub fn sg_apply_scissor_rectf(x: f32, y: f32, width: f32, height: f32, origin_top_left: bool);
}
extern "C" {
    pub fn sg_apply_pipeline(pip: sg_pipeline);
}
extern "C" {
    pub fn sg_apply_bindings(bindings: *const sg_bindings);
}
extern "C" {
    pub fn sg_apply_uniforms(
        stage: sg_shader_stage,
        ub_index: ::std::os::raw::c_int,
        data: *const sg_range,
    );
}
extern "C" {
    pub fn sg_draw(
        base_element: ::std::os::raw::c_int,
        num_elements: ::std::os::raw::c_int,
        num_instances: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sg_end_pass();
}
extern "C" {
    pub fn sg_commit();
}
extern "C" {
    pub fn sg_query_desc() -> sg_desc;
}
extern "C" {
    pub fn sg_query_backend() -> sg_backend;
}
extern "C" {
    pub fn sg_query_features() -> sg_features;
}
extern "C" {
    pub fn sg_query_limits() -> sg_limits;
}
extern "C" {
    pub fn sg_query_pixelformat(fmt: sg_pixel_format) -> sg_pixelformat_info;
}
extern "C" {
    pub fn sg_query_buffer_state(buf: sg_buffer) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_image_state(img: sg_image) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_shader_state(shd: sg_shader) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_pipeline_state(pip: sg_pipeline) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_pass_state(pass: sg_pass) -> sg_resource_state;
}
extern "C" {
    pub fn sg_query_buffer_info(buf: sg_buffer) -> sg_buffer_info;
}
extern "C" {
    pub fn sg_query_image_info(img: sg_image) -> sg_image_info;
}
extern "C" {
    pub fn sg_query_shader_info(shd: sg_shader) -> sg_shader_info;
}
extern "C" {
    pub fn sg_query_pipeline_info(pip: sg_pipeline) -> sg_pipeline_info;
}
extern "C" {
    pub fn sg_query_pass_info(pass: sg_pass) -> sg_pass_info;
}
extern "C" {
    pub fn sg_query_buffer_defaults(desc: *const sg_buffer_desc) -> sg_buffer_desc;
}
extern "C" {
    pub fn sg_query_image_defaults(desc: *const sg_image_desc) -> sg_image_desc;
}
extern "C" {
    pub fn sg_query_shader_defaults(desc: *const sg_shader_desc) -> sg_shader_desc;
}
extern "C" {
    pub fn sg_query_pipeline_defaults(desc: *const sg_pipeline_desc) -> sg_pipeline_desc;
}
extern "C" {
    pub fn sg_query_pass_defaults(desc: *const sg_pass_desc) -> sg_pass_desc;
}
extern "C" {
    pub fn sg_alloc_buffer() -> sg_buffer;
}
extern "C" {
    pub fn sg_alloc_image() -> sg_image;
}
extern "C" {
    pub fn sg_alloc_shader() -> sg_shader;
}
extern "C" {
    pub fn sg_alloc_pipeline() -> sg_pipeline;
}
extern "C" {
    pub fn sg_alloc_pass() -> sg_pass;
}
extern "C" {
    pub fn sg_dealloc_buffer(buf_id: sg_buffer);
}
extern "C" {
    pub fn sg_dealloc_image(img_id: sg_image);
}
extern "C" {
    pub fn sg_dealloc_shader(shd_id: sg_shader);
}
extern "C" {
    pub fn sg_dealloc_pipeline(pip_id: sg_pipeline);
}
extern "C" {
    pub fn sg_dealloc_pass(pass_id: sg_pass);
}
extern "C" {
    pub fn sg_init_buffer(buf_id: sg_buffer, desc: *const sg_buffer_desc);
}
extern "C" {
    pub fn sg_init_image(img_id: sg_image, desc: *const sg_image_desc);
}
extern "C" {
    pub fn sg_init_shader(shd_id: sg_shader, desc: *const sg_shader_desc);
}
extern "C" {
    pub fn sg_init_pipeline(pip_id: sg_pipeline, desc: *const sg_pipeline_desc);
}
extern "C" {
    pub fn sg_init_pass(pass_id: sg_pass, desc: *const sg_pass_desc);
}
extern "C" {
    pub fn sg_uninit_buffer(buf_id: sg_buffer) -> bool;
}
extern "C" {
    pub fn sg_uninit_image(img_id: sg_image) -> bool;
}
extern "C" {
    pub fn sg_uninit_shader(shd_id: sg_shader) -> bool;
}
extern "C" {
    pub fn sg_uninit_pipeline(pip_id: sg_pipeline) -> bool;
}
extern "C" {
    pub fn sg_uninit_pass(pass_id: sg_pass) -> bool;
}
extern "C" {
    pub fn sg_fail_buffer(buf_id: sg_buffer);
}
extern "C" {
    pub fn sg_fail_image(img_id: sg_image);
}
extern "C" {
    pub fn sg_fail_shader(shd_id: sg_shader);
}
extern "C" {
    pub fn sg_fail_pipeline(pip_id: sg_pipeline);
}
extern "C" {
    pub fn sg_fail_pass(pass_id: sg_pass);
}
extern "C" {
    pub fn sg_setup_context() -> sg_context;
}
extern "C" {
    pub fn sg_activate_context(ctx_id: sg_context);
}
extern "C" {
    pub fn sg_discard_context(ctx_id: sg_context);
}
extern "C" {
    pub fn sg_d3d11_device() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sg_mtl_device() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sg_mtl_render_command_encoder() -> *const ::core::ffi::c_void;
}
pub const sapp_event_type_SAPP_EVENTTYPE_INVALID: sapp_event_type = 0;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_DOWN: sapp_event_type = 1;
pub const sapp_event_type_SAPP_EVENTTYPE_KEY_UP: sapp_event_type = 2;
pub const sapp_event_type_SAPP_EVENTTYPE_CHAR: sapp_event_type = 3;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_DOWN: sapp_event_type = 4;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_UP: sapp_event_type = 5;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_SCROLL: sapp_event_type = 6;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_MOVE: sapp_event_type = 7;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_ENTER: sapp_event_type = 8;
pub const sapp_event_type_SAPP_EVENTTYPE_MOUSE_LEAVE: sapp_event_type = 9;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_BEGAN: sapp_event_type = 10;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_MOVED: sapp_event_type = 11;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_ENDED: sapp_event_type = 12;
pub const sapp_event_type_SAPP_EVENTTYPE_TOUCHES_CANCELLED: sapp_event_type = 13;
pub const sapp_event_type_SAPP_EVENTTYPE_RESIZED: sapp_event_type = 14;
pub const sapp_event_type_SAPP_EVENTTYPE_ICONIFIED: sapp_event_type = 15;
pub const sapp_event_type_SAPP_EVENTTYPE_RESTORED: sapp_event_type = 16;
pub const sapp_event_type_SAPP_EVENTTYPE_FOCUSED: sapp_event_type = 17;
pub const sapp_event_type_SAPP_EVENTTYPE_UNFOCUSED: sapp_event_type = 18;
pub const sapp_event_type_SAPP_EVENTTYPE_SUSPENDED: sapp_event_type = 19;
pub const sapp_event_type_SAPP_EVENTTYPE_RESUMED: sapp_event_type = 20;
pub const sapp_event_type_SAPP_EVENTTYPE_UPDATE_CURSOR: sapp_event_type = 21;
pub const sapp_event_type_SAPP_EVENTTYPE_QUIT_REQUESTED: sapp_event_type = 22;
pub const sapp_event_type_SAPP_EVENTTYPE_CLIPBOARD_PASTED: sapp_event_type = 23;
pub const sapp_event_type_SAPP_EVENTTYPE_FILES_DROPPED: sapp_event_type = 24;
pub const sapp_event_type__SAPP_EVENTTYPE_NUM: sapp_event_type = 25;
pub const sapp_event_type__SAPP_EVENTTYPE_FORCE_U32: sapp_event_type = 2147483647;
pub type sapp_event_type = ::std::os::raw::c_uint;
pub const sapp_keycode_SAPP_KEYCODE_INVALID: sapp_keycode = 0;
pub const sapp_keycode_SAPP_KEYCODE_SPACE: sapp_keycode = 32;
pub const sapp_keycode_SAPP_KEYCODE_APOSTROPHE: sapp_keycode = 39;
pub const sapp_keycode_SAPP_KEYCODE_COMMA: sapp_keycode = 44;
pub const sapp_keycode_SAPP_KEYCODE_MINUS: sapp_keycode = 45;
pub const sapp_keycode_SAPP_KEYCODE_PERIOD: sapp_keycode = 46;
pub const sapp_keycode_SAPP_KEYCODE_SLASH: sapp_keycode = 47;
pub const sapp_keycode_SAPP_KEYCODE_0: sapp_keycode = 48;
pub const sapp_keycode_SAPP_KEYCODE_1: sapp_keycode = 49;
pub const sapp_keycode_SAPP_KEYCODE_2: sapp_keycode = 50;
pub const sapp_keycode_SAPP_KEYCODE_3: sapp_keycode = 51;
pub const sapp_keycode_SAPP_KEYCODE_4: sapp_keycode = 52;
pub const sapp_keycode_SAPP_KEYCODE_5: sapp_keycode = 53;
pub const sapp_keycode_SAPP_KEYCODE_6: sapp_keycode = 54;
pub const sapp_keycode_SAPP_KEYCODE_7: sapp_keycode = 55;
pub const sapp_keycode_SAPP_KEYCODE_8: sapp_keycode = 56;
pub const sapp_keycode_SAPP_KEYCODE_9: sapp_keycode = 57;
pub const sapp_keycode_SAPP_KEYCODE_SEMICOLON: sapp_keycode = 59;
pub const sapp_keycode_SAPP_KEYCODE_EQUAL: sapp_keycode = 61;
pub const sapp_keycode_SAPP_KEYCODE_A: sapp_keycode = 65;
pub const sapp_keycode_SAPP_KEYCODE_B: sapp_keycode = 66;
pub const sapp_keycode_SAPP_KEYCODE_C: sapp_keycode = 67;
pub const sapp_keycode_SAPP_KEYCODE_D: sapp_keycode = 68;
pub const sapp_keycode_SAPP_KEYCODE_E: sapp_keycode = 69;
pub const sapp_keycode_SAPP_KEYCODE_F: sapp_keycode = 70;
pub const sapp_keycode_SAPP_KEYCODE_G: sapp_keycode = 71;
pub const sapp_keycode_SAPP_KEYCODE_H: sapp_keycode = 72;
pub const sapp_keycode_SAPP_KEYCODE_I: sapp_keycode = 73;
pub const sapp_keycode_SAPP_KEYCODE_J: sapp_keycode = 74;
pub const sapp_keycode_SAPP_KEYCODE_K: sapp_keycode = 75;
pub const sapp_keycode_SAPP_KEYCODE_L: sapp_keycode = 76;
pub const sapp_keycode_SAPP_KEYCODE_M: sapp_keycode = 77;
pub const sapp_keycode_SAPP_KEYCODE_N: sapp_keycode = 78;
pub const sapp_keycode_SAPP_KEYCODE_O: sapp_keycode = 79;
pub const sapp_keycode_SAPP_KEYCODE_P: sapp_keycode = 80;
pub const sapp_keycode_SAPP_KEYCODE_Q: sapp_keycode = 81;
pub const sapp_keycode_SAPP_KEYCODE_R: sapp_keycode = 82;
pub const sapp_keycode_SAPP_KEYCODE_S: sapp_keycode = 83;
pub const sapp_keycode_SAPP_KEYCODE_T: sapp_keycode = 84;
pub const sapp_keycode_SAPP_KEYCODE_U: sapp_keycode = 85;
pub const sapp_keycode_SAPP_KEYCODE_V: sapp_keycode = 86;
pub const sapp_keycode_SAPP_KEYCODE_W: sapp_keycode = 87;
pub const sapp_keycode_SAPP_KEYCODE_X: sapp_keycode = 88;
pub const sapp_keycode_SAPP_KEYCODE_Y: sapp_keycode = 89;
pub const sapp_keycode_SAPP_KEYCODE_Z: sapp_keycode = 90;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_BRACKET: sapp_keycode = 91;
pub const sapp_keycode_SAPP_KEYCODE_BACKSLASH: sapp_keycode = 92;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_BRACKET: sapp_keycode = 93;
pub const sapp_keycode_SAPP_KEYCODE_GRAVE_ACCENT: sapp_keycode = 96;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_1: sapp_keycode = 161;
pub const sapp_keycode_SAPP_KEYCODE_WORLD_2: sapp_keycode = 162;
pub const sapp_keycode_SAPP_KEYCODE_ESCAPE: sapp_keycode = 256;
pub const sapp_keycode_SAPP_KEYCODE_ENTER: sapp_keycode = 257;
pub const sapp_keycode_SAPP_KEYCODE_TAB: sapp_keycode = 258;
pub const sapp_keycode_SAPP_KEYCODE_BACKSPACE: sapp_keycode = 259;
pub const sapp_keycode_SAPP_KEYCODE_INSERT: sapp_keycode = 260;
pub const sapp_keycode_SAPP_KEYCODE_DELETE: sapp_keycode = 261;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT: sapp_keycode = 262;
pub const sapp_keycode_SAPP_KEYCODE_LEFT: sapp_keycode = 263;
pub const sapp_keycode_SAPP_KEYCODE_DOWN: sapp_keycode = 264;
pub const sapp_keycode_SAPP_KEYCODE_UP: sapp_keycode = 265;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_UP: sapp_keycode = 266;
pub const sapp_keycode_SAPP_KEYCODE_PAGE_DOWN: sapp_keycode = 267;
pub const sapp_keycode_SAPP_KEYCODE_HOME: sapp_keycode = 268;
pub const sapp_keycode_SAPP_KEYCODE_END: sapp_keycode = 269;
pub const sapp_keycode_SAPP_KEYCODE_CAPS_LOCK: sapp_keycode = 280;
pub const sapp_keycode_SAPP_KEYCODE_SCROLL_LOCK: sapp_keycode = 281;
pub const sapp_keycode_SAPP_KEYCODE_NUM_LOCK: sapp_keycode = 282;
pub const sapp_keycode_SAPP_KEYCODE_PRINT_SCREEN: sapp_keycode = 283;
pub const sapp_keycode_SAPP_KEYCODE_PAUSE: sapp_keycode = 284;
pub const sapp_keycode_SAPP_KEYCODE_F1: sapp_keycode = 290;
pub const sapp_keycode_SAPP_KEYCODE_F2: sapp_keycode = 291;
pub const sapp_keycode_SAPP_KEYCODE_F3: sapp_keycode = 292;
pub const sapp_keycode_SAPP_KEYCODE_F4: sapp_keycode = 293;
pub const sapp_keycode_SAPP_KEYCODE_F5: sapp_keycode = 294;
pub const sapp_keycode_SAPP_KEYCODE_F6: sapp_keycode = 295;
pub const sapp_keycode_SAPP_KEYCODE_F7: sapp_keycode = 296;
pub const sapp_keycode_SAPP_KEYCODE_F8: sapp_keycode = 297;
pub const sapp_keycode_SAPP_KEYCODE_F9: sapp_keycode = 298;
pub const sapp_keycode_SAPP_KEYCODE_F10: sapp_keycode = 299;
pub const sapp_keycode_SAPP_KEYCODE_F11: sapp_keycode = 300;
pub const sapp_keycode_SAPP_KEYCODE_F12: sapp_keycode = 301;
pub const sapp_keycode_SAPP_KEYCODE_F13: sapp_keycode = 302;
pub const sapp_keycode_SAPP_KEYCODE_F14: sapp_keycode = 303;
pub const sapp_keycode_SAPP_KEYCODE_F15: sapp_keycode = 304;
pub const sapp_keycode_SAPP_KEYCODE_F16: sapp_keycode = 305;
pub const sapp_keycode_SAPP_KEYCODE_F17: sapp_keycode = 306;
pub const sapp_keycode_SAPP_KEYCODE_F18: sapp_keycode = 307;
pub const sapp_keycode_SAPP_KEYCODE_F19: sapp_keycode = 308;
pub const sapp_keycode_SAPP_KEYCODE_F20: sapp_keycode = 309;
pub const sapp_keycode_SAPP_KEYCODE_F21: sapp_keycode = 310;
pub const sapp_keycode_SAPP_KEYCODE_F22: sapp_keycode = 311;
pub const sapp_keycode_SAPP_KEYCODE_F23: sapp_keycode = 312;
pub const sapp_keycode_SAPP_KEYCODE_F24: sapp_keycode = 313;
pub const sapp_keycode_SAPP_KEYCODE_F25: sapp_keycode = 314;
pub const sapp_keycode_SAPP_KEYCODE_KP_0: sapp_keycode = 320;
pub const sapp_keycode_SAPP_KEYCODE_KP_1: sapp_keycode = 321;
pub const sapp_keycode_SAPP_KEYCODE_KP_2: sapp_keycode = 322;
pub const sapp_keycode_SAPP_KEYCODE_KP_3: sapp_keycode = 323;
pub const sapp_keycode_SAPP_KEYCODE_KP_4: sapp_keycode = 324;
pub const sapp_keycode_SAPP_KEYCODE_KP_5: sapp_keycode = 325;
pub const sapp_keycode_SAPP_KEYCODE_KP_6: sapp_keycode = 326;
pub const sapp_keycode_SAPP_KEYCODE_KP_7: sapp_keycode = 327;
pub const sapp_keycode_SAPP_KEYCODE_KP_8: sapp_keycode = 328;
pub const sapp_keycode_SAPP_KEYCODE_KP_9: sapp_keycode = 329;
pub const sapp_keycode_SAPP_KEYCODE_KP_DECIMAL: sapp_keycode = 330;
pub const sapp_keycode_SAPP_KEYCODE_KP_DIVIDE: sapp_keycode = 331;
pub const sapp_keycode_SAPP_KEYCODE_KP_MULTIPLY: sapp_keycode = 332;
pub const sapp_keycode_SAPP_KEYCODE_KP_SUBTRACT: sapp_keycode = 333;
pub const sapp_keycode_SAPP_KEYCODE_KP_ADD: sapp_keycode = 334;
pub const sapp_keycode_SAPP_KEYCODE_KP_ENTER: sapp_keycode = 335;
pub const sapp_keycode_SAPP_KEYCODE_KP_EQUAL: sapp_keycode = 336;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SHIFT: sapp_keycode = 340;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_CONTROL: sapp_keycode = 341;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_ALT: sapp_keycode = 342;
pub const sapp_keycode_SAPP_KEYCODE_LEFT_SUPER: sapp_keycode = 343;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SHIFT: sapp_keycode = 344;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_CONTROL: sapp_keycode = 345;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_ALT: sapp_keycode = 346;
pub const sapp_keycode_SAPP_KEYCODE_RIGHT_SUPER: sapp_keycode = 347;
pub const sapp_keycode_SAPP_KEYCODE_MENU: sapp_keycode = 348;
pub type sapp_keycode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sapp_touchpoint {
    pub identifier: usize,
    pub pos_x: f32,
    pub pos_y: f32,
    pub changed: bool,
}
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_LEFT: sapp_mousebutton = 0;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_RIGHT: sapp_mousebutton = 1;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_MIDDLE: sapp_mousebutton = 2;
pub const sapp_mousebutton_SAPP_MOUSEBUTTON_INVALID: sapp_mousebutton = 256;
pub type sapp_mousebutton = ::std::os::raw::c_uint;
#[repr(C)]
pub struct sapp_event {
    pub frame_count: u64,
    pub type_: sapp_event_type,
    pub key_code: sapp_keycode,
    pub char_code: u32,
    pub key_repeat: bool,
    pub modifiers: u32,
    pub mouse_button: sapp_mousebutton,
    pub mouse_x: f32,
    pub mouse_y: f32,
    pub mouse_dx: f32,
    pub mouse_dy: f32,
    pub scroll_x: f32,
    pub scroll_y: f32,
    pub num_touches: ::std::os::raw::c_int,
    pub touches: [sapp_touchpoint; 8usize],
    pub window_width: ::std::os::raw::c_int,
    pub window_height: ::std::os::raw::c_int,
    pub framebuffer_width: ::std::os::raw::c_int,
    pub framebuffer_height: ::std::os::raw::c_int,
}
impl Default for sapp_event {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sapp_event {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sapp_event {{ type: {:?}, key_code: {:?}, key_repeat: {:?}, mouse_button: {:?}, mouse_x: {:?}, mouse_y: {:?}, mouse_dx: {:?}, mouse_dy: {:?}, scroll_x: {:?}, scroll_y: {:?}, num_touches: {:?}, touches: {:?}, window_width: {:?}, window_height: {:?}, framebuffer_width: {:?}, framebuffer_height: {:?} }}" , self . type_ , self . key_code , self . key_repeat , self . mouse_button , self . mouse_x , self . mouse_y , self . mouse_dx , self . mouse_dy , self . scroll_x , self . scroll_y , self . num_touches , self . touches , self . window_width , self . window_height , self . framebuffer_width , self . framebuffer_height)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_range {
    pub ptr: *const ::core::ffi::c_void,
    pub size: usize,
}
impl Default for sapp_range {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_image_desc {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub pixels: sapp_range,
}
impl Default for sapp_image_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_icon_desc {
    pub sokol_default: bool,
    pub images: [sapp_image_desc; 8usize],
}
impl Default for sapp_icon_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sapp_desc {
    pub init_cb: ::core::option::Option<unsafe extern "C" fn()>,
    pub frame_cb: ::core::option::Option<unsafe extern "C" fn()>,
    pub cleanup_cb: ::core::option::Option<unsafe extern "C" fn()>,
    pub event_cb: ::core::option::Option<unsafe extern "C" fn(arg1: *const sapp_event)>,
    pub fail_cb: ::core::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub user_data: *mut ::core::ffi::c_void,
    pub init_userdata_cb:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub frame_userdata_cb:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub cleanup_userdata_cb:
        ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
    pub event_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const sapp_event, arg2: *mut ::core::ffi::c_void),
    >,
    pub fail_userdata_cb: ::core::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, arg2: *mut ::core::ffi::c_void),
    >,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub sample_count: ::std::os::raw::c_int,
    pub swap_interval: ::std::os::raw::c_int,
    pub high_dpi: bool,
    pub fullscreen: bool,
    pub alpha: bool,
    pub window_title: *const ::std::os::raw::c_char,
    pub user_cursor: bool,
    pub enable_clipboard: bool,
    pub clipboard_size: ::std::os::raw::c_int,
    pub enable_dragndrop: bool,
    pub max_dropped_files: ::std::os::raw::c_int,
    pub max_dropped_file_path_length: ::std::os::raw::c_int,
    pub icon: sapp_icon_desc,
    pub gl_force_gles2: bool,
    pub win32_console_utf8: bool,
    pub win32_console_create: bool,
    pub win32_console_attach: bool,
    pub html5_canvas_name: *const ::std::os::raw::c_char,
    pub html5_canvas_resize: bool,
    pub html5_preserve_drawing_buffer: bool,
    pub html5_premultiplied_alpha: bool,
    pub html5_ask_leave_site: bool,
    pub ios_keyboard_resizes_canvas: bool,
}
impl Default for sapp_desc {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_NO_ERROR: sapp_html5_fetch_error = 0;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_BUFFER_TOO_SMALL: sapp_html5_fetch_error =
    1;
pub const sapp_html5_fetch_error_SAPP_HTML5_FETCH_ERROR_OTHER: sapp_html5_fetch_error = 2;
pub type sapp_html5_fetch_error = ::std::os::raw::c_uint;
#[repr(C)]
pub struct sapp_html5_fetch_response {
    pub succeeded: bool,
    pub error_code: sapp_html5_fetch_error,
    pub file_index: ::std::os::raw::c_int,
    pub fetched_size: u32,
    pub buffer_ptr: *mut ::core::ffi::c_void,
    pub buffer_size: u32,
    pub user_data: *mut ::core::ffi::c_void,
}
impl Default for sapp_html5_fetch_response {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sapp_html5_fetch_response {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sapp_html5_fetch_response {{ succeeded: {:?}, error_code: {:?}, file_index: {:?}, buffer_ptr: {:?}, user_data: {:?} }}" , self . succeeded , self . error_code , self . file_index , self . buffer_ptr , self . user_data)
    }
}
#[repr(C)]
pub struct sapp_html5_fetch_request {
    pub dropped_file_index: ::std::os::raw::c_int,
    pub callback:
        ::core::option::Option<unsafe extern "C" fn(arg1: *const sapp_html5_fetch_response)>,
    pub buffer_ptr: *mut ::core::ffi::c_void,
    pub buffer_size: u32,
    pub user_data: *mut ::core::ffi::c_void,
}
impl Default for sapp_html5_fetch_request {
    fn default() -> Self {
        let mut s = ::core::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::core::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ::core::fmt::Debug for sapp_html5_fetch_request {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "sapp_html5_fetch_request {{ dropped_file_index: {:?}, callback: {:?}, buffer_ptr: {:?}, user_data: {:?} }}" , self . dropped_file_index , self . callback , self . buffer_ptr , self . user_data)
    }
}
extern "C" {
    pub fn sapp_isvalid() -> bool;
}
extern "C" {
    pub fn sapp_width() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_widthf() -> f32;
}
extern "C" {
    pub fn sapp_height() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_heightf() -> f32;
}
extern "C" {
    pub fn sapp_color_format() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_depth_format() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_sample_count() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_high_dpi() -> bool;
}
extern "C" {
    pub fn sapp_dpi_scale() -> f32;
}
extern "C" {
    pub fn sapp_show_keyboard(show: bool);
}
extern "C" {
    pub fn sapp_keyboard_shown() -> bool;
}
extern "C" {
    pub fn sapp_is_fullscreen() -> bool;
}
extern "C" {
    pub fn sapp_toggle_fullscreen();
}
extern "C" {
    pub fn sapp_show_mouse(show: bool);
}
extern "C" {
    pub fn sapp_mouse_shown() -> bool;
}
extern "C" {
    pub fn sapp_lock_mouse(lock: bool);
}
extern "C" {
    pub fn sapp_mouse_locked() -> bool;
}
extern "C" {
    pub fn sapp_userdata() -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_query_desc() -> sapp_desc;
}
extern "C" {
    pub fn sapp_request_quit();
}
extern "C" {
    pub fn sapp_cancel_quit();
}
extern "C" {
    pub fn sapp_quit();
}
extern "C" {
    pub fn sapp_consume_event();
}
extern "C" {
    pub fn sapp_frame_count() -> u64;
}
extern "C" {
    pub fn sapp_frame_duration() -> f64;
}
extern "C" {
    pub fn sapp_set_clipboard_string(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sapp_get_clipboard_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sapp_set_window_title(str_: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sapp_set_icon(icon_desc: *const sapp_icon_desc);
}
extern "C" {
    pub fn sapp_get_num_dropped_files() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sapp_get_dropped_file_path(
        index: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sapp_run(desc: *const sapp_desc);
}
extern "C" {
    pub fn sapp_gles2() -> bool;
}
extern "C" {
    pub fn sapp_html5_ask_leave_site(ask: bool);
}
extern "C" {
    pub fn sapp_html5_get_dropped_file_size(index: ::std::os::raw::c_int) -> u32;
}
extern "C" {
    pub fn sapp_html5_fetch_dropped_file(request: *const sapp_html5_fetch_request);
}
extern "C" {
    pub fn sapp_metal_get_device() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_metal_get_renderpass_descriptor() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_metal_get_drawable() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_macos_get_window() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_ios_get_window() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_device() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_device_context() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_swap_chain() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_render_target_view() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_d3d11_get_depth_stencil_view() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_win32_get_hwnd() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_device() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_render_view() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_resolve_view() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_wgpu_get_depth_stencil_view() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_android_get_native_activity() -> *const ::core::ffi::c_void;
}
extern "C" {
    pub fn sapp_sgcontext() -> sg_context_desc;
}
